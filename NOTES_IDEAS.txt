ENGINE EDITOR NOTES:
- In 3D scene editor, press 'mouse right' for WASD movement
- Press shift and scroll mouse wheel to modify movement speed
- Press shift to 'run'

https://www.youtube.com/watch?v=2mpklUE7BfA&ab_channel=DanielPHFox

- The Voxel Extension does not have complicated generation logic, but it allows for easy insertion of such logic
- For example, cave density and height capping: The extension just does everything randomly, but users can control this.
- The base 2d noise map does not provide erosion algorithms, so I will need to create this. 
- The extension allows for insertion for custom noise maps.
- The extension allows for starting seeds, allowing for deterministic generation.

- Custom C++ Godot modules are more stable and more powerful than extensions, but less portable
- In order to use godot as a git submodule, but also have custom godot modules, godot has an option to declare custom modules
- Added a linux alias in order for quick builds:
alias gcomp="scons platform=linuxbsd use_llvm=yes use_static_cpp=no linker=mold custom_modules=../modules"


CURRENT PLAN:
- YOU DO NOT NEED FANCY EROSION ALGORITHMS!!! 
- MORROWIND'S BASE WAS DONE WITH A PROC GEN TERRAIN, BUT NO EROSION
- I need to create a biome layer (2d noise map)
- I need to create a erosion layer
- I need 1 layer for each random element: rivers, trees, lakes, towns, cliffs, e.t.c

- Create the base terrain with standard heightmap meshes, and then generate voxels only for overhanging terrain and caves
- Because the terrain is static, and caves/overhang should be mildly sparse, it should still be faster than pure voxels
- Hard part would be to figure out how to stitch the 2 meshes




https://www.youtube.com/watch?v=jDM0m4WuBAg&t=247s&ab_channel=DitzyNinja%27sGodojo
https://github.com/TheGodojo/Massive-Terrain-LOD-And-Stitching-COMPLETE
https://docs.godotengine.org/en/stable/tutorials/shaders/compute_shaders.html
https://github.com/godotengine/godot-demo-projects/blob/master/misc/compute_shader_heightmap/compute_shader.glsl
https://github.com/KdotJPG/OpenSimplex2/blob/master/glsl/OpenSimplex2.glsl

terrain generator theory in general:
https://youtu.be/QF2Nj1zME40



NOISE RELATED:
- libnoise created a complex heightmap that relistically generated an earth-like terrain. 
- I need to port that into godot:
	https://libnoise.sourceforge.net/examples/complexplanet/index.html
- At least, I need to port enough as a starting point.

- libnoise is old however, so it would benefit to look at terrain algorithms mentioned in this video:
	https://youtu.be/QF2Nj1zME40

- Daggerfall is roughly 12,688,000 godot units

- I really do want runtime procedurally generated worlds. 
- You can implement the entire noise generation on GPU just fine.
- Objects like trees, rocks, rivers, e.t.c need to be calculated on CPU (gdscript)
- But, you could provide ONLY the vertices that will need to be accomodated


MULTI-THREADING NOTES:
- godot does not allow any mesh creation outside of the main thread
- BUT, because I did most of my code manually, I can most likely just move the calculations to another thread 
- then add the values to the array mesh after the thread task finishes!


TODO LIST:
- proper LOD system not implemented yet (remember that there will be seams issues between different LOD chunks)
- add collision 
- consider if all chunks should have collision, or just the minimum amount 
- maybe minimum chunks?
- if all chunks had collision, I could perhaps go crazy with physics? Potentially less compute wasted than trying to minimize collision.

- LOD system is next, as well as proximity prioitising
- chunks in the direction that the player is looking in should be prioitised
- as well as the closest to the player

- Actually, I should modify the system so that it just updates the mesh of each chunk, instead of creating new nodes





- OKAY WELL THIS ESCALATED QUICKLY
- I will now be modifying from the RENDERING SERVER directly
- since I have most of the building blocks of a mesh, apparently its not too hard to just add it to the scene 
- functions to remember: mesh_add_surface, mesh_create_from_surfaces, mesh_add_surface_from_arrays
call_on_render_thread




THERE IS STILL ONE TINY MEMORY LEAK LEFT:

Orphan StringName: Node (static: 10, total: 11)
StringName: 1 unclaimed string names at exit.